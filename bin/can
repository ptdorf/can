#!/usr/bin/env ruby
# encoding: UTF-8
## DESCRIPTION
##     can stores stuff
##
## USAGE
##     can <command> [name] [value] [options]
##
## COMMANDS
##     set [name] [value]     Sets a key
##     get [name]             Copies a key
##     rm [name]              Removes a value
##     list                   Lists all keys
##     version                Shows the version
##     help                   Shows this help
##

$:.push File.expand_path('../lib', __FILE__)

begin
  require 'can'
rescue LoadError
  require 'rubygems'
  require 'can'
end

file = "#{ENV['HOME']}/.can2"
can  = Can::Command.new(file)
prog = File.basename($0)
real = File.realpath(__FILE__)
cmd  = ARGV[0] || ''

case cmd
  when ''
    puts "Usage: #{prog} <command> [options]. Try '#{prog} help'."

  when 'version', '--version', '-v'
    printf "v%s\n", Can::VERSION

  when 'help', '--help', '-h'
    system("grep -o '^##.*' #{real} | cut -c 4-")

  when 'list', '-l'
    name = ARGV[1] || nil
    data = can.read_file
    data.each do |k, v|
      puts k
    end

  when 'test', '-t'
    name = ARGV[1] || abort("A name is required to delete.")
    puts "The key '#{name}' " + (can.exists(name) ? "exists" : "does not exist") + "." 

  when 'delete', 'rm', '-d'
    name = ARGV[1] || abort("A name is required to delete.")
    value = can.get_value(name) ||Â abort("Invalid key '#{name}'.")
    can.remove_value(name) || abort("Failed to delete key '#{name}'.")
    puts "Value '#{name}' with value '#{value}' was deleted."

  # when 'save', '-s'
  #   system("cd /Users/pedro/.dotfiles && git add --all && git commit -m 'Saving more passwords' && git push origin HEAD")

  when 'set'
    name  = ARGV[1] || abort("You need to provide a name.")
    value = ARGV[2] || abort("You need to provide a value.")
    can.set_value(name, value) || abort "#{name} failed to be set."
    puts "The key '#{name}' was added."

  when 'get'
    name  = ARGV[1] || nil
    abort "You need to provide a name." unless name

    value = can.get_value name
    abort "#{name} failed to be copied." unless can.copy_value value
    puts "The key '#{name}' was copied."

  else
    abort "Unknown command '#{cmd}'. Try '#{prog} help'."

end
