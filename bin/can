#!/usr/bin/env ruby
## Commands:
##   set  NAME VALUE   Sets a key
##   get  NAME         Copies a key
##   rm   NAME         Removes a value
##   list              Lists all keys
##   version           Shows the version
##   help              Shows this help
##

# lib/can.rb contents
require 'rubygems'
require 'openssl'
require 'json'
require 'yaml'
require 'zlib'
require 'base64'
require 'digest/sha1'
require 'io/console'


module Can
  VERSION = '0.4.3'

  class Command

    def initialize file
      @file = file
    end

    def list name = nil
      data = read()
      data.each do |k, v|
        puts k
      end
    end

    def exists name
      data = read()
      data[name] ? true : false
    end    

    def get name
      data = read()
      data[name] || nil
    end    

    def copy value
      IO.popen('pbcopy', 'w') { |cc| cc.write(value) }
      value
    end  

    def set name, value
      data = read()
      data[name] = value
      write(data)
      p data
    end  

    def remove name
      data = read()
      data.delete name
      write(data)
    end  

    def encrypt file, password = nil
      password ||= ask_password()
      content = File.read file
      content = Utils.encrypt(content, password)
      content = Utils.neat(content)
    end  

    def decrypt file, password = nil
      password ||= ask_password()
      content = File.read file
      content = Utils.join(content)
      content = Utils.decrypt(content, password)
    end  

    private
    def ask_password
      print "Enter your password: "
      password = STDIN.noecho(&:gets)
      abort("The password is too short") if password.length < 1
      puts
      password
    end

    def read
      @password = ask_password()

      begin
        content = File.read @file
        # content = Utils.unzip(content)
        content = Utils.clean(content)
        content = Utils.decode(content)
        content = Utils.decrypt(content, @password)
      rescue
        content = ''
      end

      data = content.length > 0 ? JSON.parse(content) : {}
    end

    def write data
      content = JSON.dump(data)
      content = Utils.encrypt(content, @password)
      content = Utils.encode(content)
      content = Utils.neat(content)
      # content = Utils.zip(content)
      File.write(@file, content)
    end
  end

  class Utils

    def self.digest password
      Digest::SHA1.hexdigest(password)
    end

   def self.encrypt__ data, password
      secret = self.digest(password)
      cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')
      cipher.encrypt
      cipher.key = secret
      cipher.iv  = iv = cipher.random_iv
      encrypted  = cipher.update(data) + cipher.final

      Base64.strict_encode64(encrypted) + '--' + Base64.strict_encode64(iv)
    end

   def self.encrypt data, password
      secret = self.digest(password)
      cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')
      cipher.encrypt
      cipher.key = secret
      cipher.iv  = iv = cipher.random_iv
      encrypted  = cipher.update(data) + cipher.final

      bi = Base64.strict_encode64(iv)
      il = bi.length.to_s
      bl = Base64.strict_encode64(il)
      bd = Base64.strict_encode64(encrypted)
      bl + '--' + bi + '--' + bd
    end

    def self.decrypt data, password
      secret = self.digest(password)
      il, iv, encrypted = data.split('--').map {|v| Base64.strict_decode64(v)}

      cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')
      cipher.decrypt
      cipher.key = secret
      cipher.iv = iv

      cipher.update(encrypted) + cipher.final
    end

    def self.decrypt__ data, password
      secret = self.digest(password)
      encrypted, iv = data.split('--').map {|v| Base64.strict_decode64(v)}

      cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')
      cipher.decrypt
      cipher.key = secret
      cipher.iv = iv

      cipher.update(encrypted) + cipher.final
    end

    def self.encode data
      data.unpack('H*').first
    end

    def self.decode data
      data.scan(/../).map { |x| x.hex }.pack('c*')
    end

    def self.zip data
      Zlib::Deflate.deflate data
    end

    def self.unzip data
      Zlib::Inflate.inflate data
    end

    def self.neat data
      data.scan(/.{1,64}/).join("\n")
    end

    def self.clean data
      data.split("\n").join('')
    end

  end

end


# bin/can contents
file = "#{ENV['HOME']}/.can2"
can  = Can::Command.new(file)
prog = File.basename($0)
real = File.realpath(__FILE__)
cmd  = ARGV[0] || ''

case cmd
  when '', 'help'
    system("grep -o '^##.*' #{real} | cut -c 4-")
  when 'version', '--version', '-v'
    puts "v#{Can::VERSION}"
  when 'list'
    name = ARGV[1]
    can.list name
  when 'test'
    name  = ARGV[1]           or abort("A name is required to delete.")
    exist = can.exists(name)  or abort("The key '#{name}' does not exist.")
    puts "The key '#{name}' does exist."
  when 'delete', 'rm'
    name  = ARGV[1]           or abort("A name is required to delete.")
    can.remove(name)          or abort("Failed to delete key '#{name}'.")
    puts "Value '#{name}' with value '#{value}' was deleted."
  when 'sync', 'save', '-s'
    puts "To do"
  when 'set'
    name  = ARGV[1]           or abort("You need to provide a name.")
    value = ARGV[2]           or abort("You need to provide a value.")
    can.set(name, value)      or abort("#{name} failed to be set.")
    puts "The key '#{name}' was added."
  when 'get', 'show'
    name  = ARGV[1]           or abort("You need to provide a name.")
    value = can.get(name)     or abort("The key'#{name}' was not found.")
    puts "#{value}"
  when 'cp', 'copy'
    name  = ARGV[1]           or abort("You need to provide a name.")
    value = can.get(name)     or abort("The key '#{name}' was not found.")
    can.copy(value)           or abort("#{name} failed to be copied.")
    puts "The value for '#{name}' was copied."
  when 'encrypt'
    ARGV.shift
    password = 'a'
    # password = nil
    # if ARGV.include? '-p'
    #   ARGV.shift
    #   password = ARGV.shift
    # end
    puts can.encrypt ARGV.shift, password
  when 'decrypt'
    ARGV.shift
    password = 'a'
    # password = nil
    # if ARGV.include? '-p'
    #   ARGV.shift
    #   password = ARGV.shift
    # end
    puts can.decrypt ARGV.shift, password
  when 'cat'
    system "cat #{file}"
  else
    abort "Unknown command '#{cmd}'. Try '#{prog} help'."
end
