#!/usr/bin/env ruby
# encoding: UTF-8
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__)) + "/../lib"

require "thor"
require "can"

FILE = "#{ENV['HOME']}/.can"

module Can
  class Cli < Thor
    class_option :password, aliases: "-p"

    desc "version", "Show current version"
    def version
      puts "v#{VERSION}"
    end

    desc "ls", "Lists all keys"
    def ls
      init
      @can.list.each do |k, v|
        puts k
      end
    end

    desc "get KEY", "Copies a key"
    def get key
      init
      value = @can.get(key) or abort "Key #{key} does not exist."
      @can.copy value
      puts "Key #{key} was copied."
    end

    desc "set KEY VALUE", "Stores a key"
    def set key, value
      init
      @can.set key, value
      puts "Key #{key} was saved."
    end

    desc "rm KEY", "Removes a key"
    def rm key
      init
      @can.remove key
      puts "Key #{key} was deleted."
    end

    desc "cat", "Shows all content"
    def cat
      init
      puts @can.content
    end

    private
    def method_missing name, *args
      name  = name.to_s
      value = args[0]
      if value
        set name, value
      else
        get name
      end
    end

    def init
      pass = options[:password] || ask_password()
      @can = Can::Command.new(FILE, pass)
    end

    def ask_password
      print "Password: "
      answer = STDIN.noecho(&:gets)
      abort if answer.length < 1
      puts
      answer
    end
  end
end

Can::Cli.start ARGV
