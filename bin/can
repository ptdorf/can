#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__)) + "/../lib"

require "thor"
require "can"
require "io/console"
require "json"
require "tablelize"

FILE = "#{ENV['HOME']}/.can"

module Can
  class Cli < Thor
    class_option :password, aliases: "-p"

    desc "version", "Show current version"
    def version
      puts "v#{VERSION}"
    end

    desc "ls", "Lists all keys"
    def ls
      init
      @can.list.each do |k, v|
        puts k
      end
    end

    desc "get KEY", "Copies a key to the clipboard"
    def get key
      init
      value = @can.get(key) or abort "Key #{key} does not exist."
      @can.copy value
      puts "Key #{key} was copied."
    end

    desc "rename KEY NEW_KEY", "Renames a secret"
    def rename key, new_key
      init
      value = @can.get(key) or abort "Key #{key} does not exist."
      @can.set new_key, value
      @can.remove key
      puts "Key #{key} was renamed to #{new_key}."
    end

    desc "password", "Change the can password"
    def password
      init
      pass1 = ask("New password: ")
      pass2 = ask("Confirm password: ")
      if pass1 != pass2
        puts "Passwords don't match."
        abort
      end
      @can.password pass
      puts "Can password was changed."
    end

    desc "set KEY [VALUE]", "Stores a value (leave the value empty for a prompt; use '@random' for a random value)"
    def set key, value=nil, copy=false
      init
      if value == "@random"
        copy = true
        value = random(40, true)
      end
      value = value || ask("Value: ")
      @can.set key, value
      if copy
        @can.copy value
        puts "Key #{key} was saved and copied."
      else
        puts "Key #{key} was saved."
      end
    end

    desc "rm KEY", "Removes a key"
    def rm key
      init
      @can.get(key) or abort "Key #{key} does not exist."
      @can.remove key
      puts "Key #{key} was deleted."
    end

    desc "cat", "Shows all content"
    def cat
      init
      data = JSON.parse(@can.content)
      rows = []
      rows << ["KEY", "VALUE"]
      data.each do |k, v|
        rows << [k, v]
      end

      Tablelize::table rows
    end

    desc "encrypt DATA", "Encrypts data"
    def encrypt data
      init
      puts @can.encrypt(data)
    end

    desc "decrypt DATA", "Decrypts data"
    def decrypt data
      init
      puts @can.decrypt(data)
    end

    desc "random [LENGTH]", "Generates a base36 random password"
    def random(length=40, capture=false)
      # init
      pass = rand(36**length.to_i).to_s(36)
      return pass if capture
      # @can.copy pass
      # puts "New random password copied."
      puts pass
    end

    private
    def method_missing name, *args
      name  = name.to_s
      value = args[0]
      if value
        set name, value
      else
        get name
      end
    end

    def init
      pass = options[:password] || ENV.fetch("CAN_PASSWORD", nil) || ask()
      @can = Can::Command.new(FILE, pass)
      begin @can.list
        # All ok
      rescue
        puts "Wrong password"
        abort
      end
    end

    def ask prompt = "Password: "
      print prompt
      answer = STDIN.noecho(&:gets).chomp
      abort if answer.length < 1
      puts
      answer
    end
  end
end

Can::Cli.start ARGV
