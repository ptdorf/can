#!/usr/bin/env ruby
# encoding: UTF-8
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__)) + "/../lib")

require "thor"
require "can"

unless String.method_defined?(:bold)
  class ::String
    def bold(*args)
      "\033[1m#{self}\033[0m"
    end
  end
end

FILE = "#{ENV['HOME']}/.can"
CAN  = Can::Command.new(FILE)

module Can
  class Cli < Thor

    # desc "version", "Show the version"
    # def version
    #   puts "v#{Can::VERSION}"
    # end

    desc "ls", "Lists all keys"
    def ls
        CAN.list
    end

    # desc "get KEY", "Gets a key"
    # def get key
    #   puts CAN.get(name)
    # end

    desc "copy KEY", "Copies a key"
    def get key
      CAN.copy(name)
      puts "Key #{name.bold} was copied."
    end

    desc "set KEY VALUE", "Stores a key"
    def get key, value
      CAN.set name, value
      puts "Key #{name.bold} was saved."
    end

    desc "rm KEY", "Removes a key"
    def rm key
      CAN.remove name
      puts "Key #{key} was deleted."
    end

    # desc "cat", "Shows the encrypted file"
    # def cat
    #   system "cat #{FILE}"
    #   puts
    # end

    private
    def method_missing name, *args
      name = name.to_s
      value = args[0]
      if value
        CAN.set name, value
        puts "The key #{name.bold} was set."
      else
        value = CAN.get(name)
        CAN.copy value
        puts "The value for #{name.bold} was copied."
      end
    end
  end
end

Can::Cli.start ARGV
