#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__)) + "/../lib"

require "thor"
require "can"
require "io/console"
require "json"
require "tablelize"

DIRS = [
  "#{ENV['HOME']}/.config/can",
  "/etc/can",
]

FILES = [
  "#{ENV['HOME']}/.config/can/main.can",
  "#{ENV['HOME']}/.can",
]

module Can

  class Tag < Thor
    desc "ls", "Lists all tags"
    def ls(tag=nil)
      puts "Lists all tags"
    end

    desc "add KEY TAG", "Adds a tag to a key"
    def add(key, tag)
      puts "Add tag"
    end

    desc "rm KEY TAG", "Removes a tag from a key"
    def rm(key, tag)
      puts "Remove tag"
    end

    desc "mv OLD NEW", "Renames a tag"
    def mv(old, new)
      puts "Rename tag"
    end

    desc "clear TAG", "Clears a tag from all items"
    def clear(tag)
      puts "Clears tag"
    end

    def method_missing name, *args
      ls
    end

  end

  class Data < Thor
    desc "encrypt FILE", "Encrypts data"
    def encrypt(file=nil)
      puts "Encrypts a FILE"
    end

    desc "decrypt FILE", "Decrypts data"
    def decrypt(file=nil)
      puts "Decrypts a FILE"
    end
  end

  class Cli < Thor
    # class_option :password, aliases: "-p"
    class_option :verbose, aliases: "-v", :type => :boolean
    class_option :file, aliases: "-f"
    class_option :name, aliases: "-n"

    desc "tag SUBCOMMAND", "Manage tags"
    subcommand "tag", Can::Tag

    desc "data SUBCOMMAND", "Raw data functions"
    subcommand "data", Can::Data

    desc "version", "Show the current version"
    def version
      puts VERSION
      latest = Util.latest()
      debug "Remote version: #{latest}"
      if Gem::Version.new(latest) > Gem::Version.new(VERSION)
        STDERR.puts "New version #{latest} available."
      end
    end

    desc "ls [TAG]", "Lists all keys (filter optionally by TAG)"
    option :short, :type => :boolean, aliases: "-s"
    def ls(tag=nil)
      start
      rows = [["KEY", "LENGTH", "CREATED", "UPDATED", "TAGS"]]
      empty = true

      @can.all().each do |key, entry|
        empty = false
        next if tag and (not entry["tags"] or not entry["tags"].include?(tag))
        if options[:short]
          puts key
          next
        end

        if entry.class == Hash
          value = entry["value"]
          created = entry["created"]
          updated = entry["updated"]
          entry["tags"] = entry["tags"] || []
          tags = entry["tags"].join(" ")
        else
          value = entry
          created = "-"
          updated = "-"
          tags = ""
        end

        rows << [key, value.size, created[0..9], updated[0..9], tags]
      end

      if empty
        # puts "The can file #{@file} is empty."
        puts "(Empty)"
        return
      end

      Tablelize::table(rows) if not options[:short]
    end

    desc "get KEY", "Copies a KEY to the clipboard"
    def get(key)
      start
      entry = @can.get(key) or abort "Key #{key} does not exist."
      copy(val(entry))
      puts "Key #{key} was copied to the clipboard."
    end

    desc "mv OLD NEW", "Renames a secret"
    def mv(old, new)
      start
      entry = @can.get(old) or abort "Key #{old} does not exist."
      @can.rename old, new
      puts "Key #{old} was renamed to #{new}."
    end

    desc "password", "Change the can password"
    def password
      start
      pass1 = ask_password("New password: ")
      pass2 = ask_password("Confirm the password: ")
      raise "Password is required." if pass1.length < 1
      raise "Passwords don't match." if pass1 != pass2
      @can.password pass1
      puts "Can password was changed."
    end

    desc "set KEY [VALUE]", "Stores a value (no VALUE calls the prompt; use '@random' for a generated value)"
    def set(key, value=nil)
      start
      clipboard = false
      if value == "@random"
        clipboard = true
        value = random(60, true)
      end
      value = value || ask_password("Enter the value for key '#{key}': ")
      @can.set key, value
      if clipboard
        copy(value)
        puts "Key #{key} was stored and copied to the clipboard."
      else
        puts "Key #{key} was stored."
      end
    end

    desc "rm KEY", "Removes a key"
    def rm(key)
      start
      @can.exists(key) or abort "Key #{key} does not exist."
      @can.remove key
      puts "Key #{key} was deleted."
    end

    # desc "tag KEY TAG", "Tags a key"
    # def tag(key, tag)
    #   start
    #   @can.exists(key) or abort "Key #{key} does not exist."
    #   ok = @can.tag(key, tag)
    #   puts "Tag #{tag} was added to #{key}." if ok
    #   puts "Tag #{tag} already exists on #{key}." unless ok
    # end

    # desc "tags [KEY]", "Show all tags (filter for a key)"
    # def tags(key=nil)
    #   start
    #   if key
    #     @can.exists(key) or abort "Key #{key} does not exist."
    #     entry = @can.get(key)
    #     tags = entry["tags"] || []
    #   else
    #     tags = []
    #     @can.all().each do |key, entry|
    #       entry["tags"] = entry["tags"] || []
    #       tags = tags | entry["tags"]
    #     end
    #   end

    #   puts tags.uniq.join("\n")
    # end

    # desc "untag KEY TAG", "Untags a tag from a key"
    # def untag(key, tag)
    #   start
    #   @can.exists(key) or abort "Key #{key} does not exist."
    #   ok = @can.untag(key, tag)
    #   puts "Tag #{tag} was removed from #{key}." if ok
    #   puts "Tag #{tag} doesn't exist on #{key}." unless ok
    # end

    desc "migrate", "Migrates to new format"
    def migrate()
      start
      count = @can.migrate()
      puts "Keys migrated: #{count}."
    end

    # desc "encrypt DATA", "Encrypts data"
    # def encrypt(data)
    #   start
    #   puts @can.encrypt(data)
    # end

    # desc "decrypt DATA", "Decrypts data"
    # def decrypt(data)
    #   start
    #   puts @can.decrypt(data)
    # end

    desc "random [LENGTH]", "Generates a random password"
    # option :lowers,  :type => :boolean, aliases: "-l", default: true
    # option :uppers,  :type => :boolean, aliases: "-u", default: true
    # option :numbers, :type => :boolean, aliases: "-n", default: true
    option :symbols, :type => :boolean, aliases: "-s", default: false
    def random(length=60, capture=false)
      show_info
      # symbols = %w(! ? # $ @ % & ~ _ - + = : . ; , / \( \) { } < >).to_a
      symbols = %w(# $ @ % & ~ _ - + = : . ; , / \( \) { } < >).to_a
      chars  = Array.new
      chars += ("0".."9").to_a # if options[:numbers]
      chars += ("A".."Z").to_a # if options[:uppers]
      chars += ("a".."z").to_a # if options[:lowers]
      chars += symbols if options[:symbols]
      # chars  += ("!".."?").to_a if options[:symbols]
      # chars.delete(["'", '"'])
      # pass = chars.sort_by { rand }.join[0...length]
      pass = []
      (1 .. length.to_i).each do
        pass << chars[rand(chars.size)]
      end
      pass = pass.join()
      return pass if capture
      puts pass
    end

    desc "status", "Show the environment and status"
    def status()
      name     = options[:name]    || ENV.fetch("CAN_NAME",     "\033[38;5;242m(none)\033[0m")
      file     = options[:file]    || ENV.fetch("CAN_FILE",     "\033[38;5;242m(none)\033[0m")
      verbose  = options[:verbose] || ENV.fetch("CAN_VERBOSE",  "\033[38;5;242m(none)\033[0m")
      debug    = options[:debug]   || ENV.fetch("CAN_DEBUG",    "\033[38;5;242m(none)\033[0m")
      password = options[:debug]   || ENV.fetch("CAN_PASSWORD", "\033[38;5;242m(none)\033[0m")

      rows = [["ENVIRONMENT VARIABLE", "VALUE"]]
      rows << ["  CAN_FILE",      file]
      rows << ["  CAN_NAME",      name]
      rows << ["  CAN_VERBOSE",   verbose]
      rows << ["  CAN_DEBUG",     debug]
      rows << ["  CAN_PASSWORD",  password]
      Tablelize::table(rows)

      puts
      rows = [["LOOKUP OPTIONS", "VALUE"]]
      rows << ["  Files",       FILES]
      rows << ["  Directories", DIRS]
      Tablelize::table(rows)
    end

    desc "dump", "Dumps the can contents (secrets are redacted)"
    def dump()
      start
      puts JSON.dump(@can.all().each { |k, v| v["value"] = "***" })
    end

    desc "init [FILE]", "Initializes a new can"
    def init(file=nil)
      @file = file || FILES[0]
      raise "File #{@file} already exists" if File.file?(@file)
      puts "Going to create a new can file in #{@file}"

      password = ask_password("Enter your new can password: ")
      confirm = ask_password("Confirm the password: ")

      raise "Password is required." if password.length < 1
      raise "Passwords don't match." if password != confirm

      @can = Can::Store.new(@file, password)
      @can.save({})
      puts "Can file #{@file} created"
    end

    private
    def show_info()
      # latest = Can::Util::latest()
      # debug "Latest version: #{latest}"
      debug "Can version: #{VERSION}"
      debug "Using files #{FILES}"
      debug "Using dirs #{DIRS}"
      debug "Using options #{options}"
      debug "This verbose mode is on (goes to stderr)"
    end

    def find_default()
      FILES.each do |file|
        debug "Trying file #{file}"
        if File.file?(file)
          debug "Found file #{file}"
          return file
        else
          debug "File #{file} not found"
        end
      end
      return
    end

    def find_by_name(name)
      DIRS.each do |dir|
        file = "#{dir}/#{name}.can"
        debug "Trying to find file #{file}"
        if File.file?(file)
          debug "File #{file} exists"
          return file
        else
          debug "File #{file} not found"
        end
      end
    end

    def find_file(file=nil, name=nil)
      return file if file
      return find_by_name(name) if name
      return find_default()
    end

    def start()
      name = options[:name] || ENV.fetch("CAN_NAME", nil)
      file = options[:file] || ENV.fetch("CAN_FILE", nil)

      show_info()
      @file = find_file(name, file)
      raise "Cound't find a valid file. Try 'can init' to create a new one." \
        if not @file or not File.file?(@file)

      # Disable password from args to prevent history recording
      # return if check(options[:password], "options")
      return if check(ENV.fetch("CAN_PASSWORD", nil), "env")
      return if check(ask_password(), "prompt")
      abort
    end

    def check(password, source)
      return if not password or password.length < 1

      @can = Can::Store.new(@file, password)
      begin
        @can.all()
        debug "Opened with password from #{source}"
        debug "Can format: v#{@can.format()}"
        return true
      rescue
        debug "Failed to open with password from #{source}"
        raise "Wrong password"
      end
    end

    def val(value)
      return value["value"] if value.class == Hash
      value
    end

    def ask_password(prompt = "Enter the can password: ")
        print prompt
        answer = STDIN.noecho(&:gets).chomp
        raise Interrupt if answer.length < 1
        puts
        answer
    end

    def debug(message, force=false)
      show = force || options[:verbose] # || ENV.fetch("CAN_DEBUG", "0") == "1"
      return if not show
      STDERR.puts "\033[38;5;242m#{message}\033[0m"
    end

    def copy(value)
      IO.popen("pbcopy", "w") { |cc| cc.write(value) }
      value
    end

  end
end


ENV["THOR_SILENCE_DEPRECATION"] = "1"

if ARGV.include? "-x" or ENV.fetch("CAN_DEBUG", nil) != nil
  ARGV.append("-v")
  STDERR.puts "\033[38;5;242mRunning in debug mode\033[0m"
  STDERR.puts "\033[38;5;242mARGV: #{ARGV}\033[0m"
  Can::Cli.start ARGV

else
  begin
    Can::Cli.start ARGV
  rescue Interrupt
    puts
    exit 2
  rescue Exception => e
    puts "Error: #{e}"
    exit 1
  end
end
